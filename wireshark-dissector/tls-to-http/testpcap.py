import time
import socket
import struct
import json

pcap = "test.pcap"
pcap_file = open(pcap, "wb", 0)
def write_to_pcap(t,data,src_addr,dst_addr,src_port,dst_port,seq,ack,is_req):
    if is_req:
        tcp_flag = 0x5018
    else:
        tcp_flag = 0x5010
    for writes in (
        # PCAP record (packet) header
        ("=I", int(t)),                        # Timestamp seconds
        ("=I", int((t * 1000000) % 1000000)),  # Timestamp microseconds
        ("=I", 40 + len(data)),           # Number of octets saved
        ("=i", 40 + len(data)),           # Actual length of packet
        # IPv4 header
        (">B", 0x45),                     # Version and Header Length
        (">B", 0),                        # Type of Service
        (">H", 40 + len(data)),           # Total Length
        (">H", 0),                        # Identification
        (">H", 0x4000),                   # Flags and Fragment Offset
        (">B", 0xFF),                     # Time to Live
        (">B", 6),                        # Protocol
        (">H", 0),                        # Header Checksum
        (">I", int.from_bytes(socket.inet_aton(src_addr),byteorder='big')),                 # Source Address
        (">I", int.from_bytes(socket.inet_aton(dst_addr),byteorder="big")),                 # Destination Address
        # TCP header
        (">H", src_port),                 # Source Port
        (">H", dst_port),                 # Destination Port
        (">I", seq),                      # Sequence Number
        (">I", ack),                      # Acknowledgment Number
        (">H", tcp_flag),                   # Header Length and Flags
        (">H", 0xFFFF),                   # Window Size
        (">H", 0),                        # Checksum
        (">H", 0)):                       # Urgent Pointer
        pcap_file.write(struct.pack(writes[0], writes[1]))
    pcap_file.write(b''.join(data))
for writes in (
        ("=I", 0xa1b2c3d4),     # Magic number
        ("=H", 2),              # Major version number
        ("=H", 4),              # Minor version number
        ("=i", time.timezone),  # GMT to local correction
        ("=I", 0),              # Accuracy of timestamps
        ("=I", 65535),          # Max length of captured packets
        ("=I", 228)):           # Data link type (LINKTYPE_IPV4)
    pcap_file.write(struct.pack(writes[0], writes[1]))

tp = {"http_raw":"48:54:54:50:2f:31:2e:31:20:32:30:30:20:4f:4b:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:6b:65:65:70:2d:61:6c:69:76:65:0d:0a:43:6f:6e:74:65:6e:74:2d:4c:65:6e:67:74:68:3a:20:35:37:0d:0a:43:61:63:68:65:2d:43:6f:6e:74:72:6f:6c:3a:20:6d:61:78:2d:61:67:65:3d:33:30:30:0d:0a:43:6f:6e:74:65:6e:74:2d:53:65:63:75:72:69:74:79:2d:50:6f:6c:69:63:79:3a:20:64:65:66:61:75:6c:74:2d:73:72:63:20:27:6e:6f:6e:65:27:3b:20:73:74:79:6c:65:2d:73:72:63:20:27:75:6e:73:61:66:65:2d:69:6e:6c:69:6e:65:27:3b:20:73:61:6e:64:62:6f:78:0d:0a:43:6f:6e:74:65:6e:74:2d:54:79:70:65:3a:20:74:65:78:74:2f:70:6c:61:69:6e:3b:20:63:68:61:72:73:65:74:3d:75:74:66:2d:38:0d:0a:45:54:61:67:3a:20:57:2f:22:66:66:63:38:37:36:61:32:34:63:35:61:34:38:30:64:64:31:35:35:35:64:66:62:32:35:30:63:34:62:33:32:38:36:36:31:64:65:63:32:31:64:63:63:63:61:32:32:65:37:38:34:35:66:34:63:61:38:30:35:30:35:37:35:22:0d:0a:53:74:72:69:63:74:2d:54:72:61:6e:73:70:6f:72:74:2d:53:65:63:75:72:69:74:79:3a:20:6d:61:78:2d:61:67:65:3d:33:31:35:33:36:30:30:30:0d:0a:58:2d:43:6f:6e:74:65:6e:74:2d:54:79:70:65:2d:4f:70:74:69:6f:6e:73:3a:20:6e:6f:73:6e:69:66:66:0d:0a:58:2d:46:72:61:6d:65:2d:4f:70:74:69:6f:6e:73:3a:20:64:65:6e:79:0d:0a:58:2d:58:53:53:2d:50:72:6f:74:65:63:74:69:6f:6e:3a:20:31:3b:20:6d:6f:64:65:3d:62:6c:6f:63:6b:0d:0a:58:2d:47:69:74:48:75:62:2d:52:65:71:75:65:73:74:2d:49:64:3a:20:44:36:32:36:3a:34:44:38:45:3a:31:45:45:33:31:35:3a:32:36:30:39:33:34:3a:36:32:33:44:38:30:36:45:0d:0a:46:61:73:74:6c:79:2d:4f:72:69:67:69:6e:61:6c:2d:42:6f:64:79:2d:53:69:7a:65:3a:20:35:37:0d:0a:41:63:63:65:70:74:2d:52:61:6e:67:65:73:3a:20:62:79:74:65:73:0d:0a:44:61:74:65:3a:20:46:72:69:2c:20:32:35:20:4d:61:72:20:32:30:32:32:20:30:38:3a:34:32:3a:32:32:20:47:4d:54:0d:0a:56:69:61:3a:20:31:2e:31:20:76:61:72:6e:69:73:68:0d:0a:58:2d:53:65:72:76:65:64:2d:42:79:3a:20:63:61:63:68:65:2d:76:69:65:36:33:35:36:2d:56:49:45:0d:0a:58:2d:43:61:63:68:65:3a:20:4d:49:53:53:0d:0a:58:2d:43:61:63:68:65:2d:48:69:74:73:3a:20:30:0d:0a:58:2d:54:69:6d:65:72:3a:20:53:31:36:34:38:31:39:37:37:34:33:2e:36:37:38:39:38:38:2c:56:53:30:2c:56:45:31:35:34:0d:0a:56:61:72:79:3a:20:41:75:74:68:6f:72:69:7a:61:74:69:6f:6e:2c:41:63:63:65:70:74:2d:45:6e:63:6f:64:69:6e:67:2c:4f:72:69:67:69:6e:0d:0a:41:63:63:65:73:73:2d:43:6f:6e:74:72:6f:6c:2d:41:6c:6c:6f:77:2d:4f:72:69:67:69:6e:3a:20:2a:0d:0a:58:2d:46:61:73:74:6c:79:2d:52:65:71:75:65:73:74:2d:49:44:3a:20:37:66:32:63:65:30:39:35:35:63:32:61:62:31:34:64:64:31:38:38:30:61:30:37:66:30:38:39:36:63:66:38:39:65:66:63:39:37:30:65:0d:0a:45:78:70:69:72:65:73:3a:20:46:72:69:2c:20:32:35:20:4d:61:72:20:32:30:32:32:20:30:38:3a:34:37:3a:32:32:20:47:4d:54:0d:0a:53:6f:75:72:63:65:2d:41:67:65:3a:20:30:0d:0a:0d:0a:65:79:4a:6b:62:32:31:68:61:57:35:7a:49:6a:70:62:49:6d:68:30:64:48:41:36:4c:79:39:30:62:32:31:76:63:32:4e:6f:5a:58:4e:30:5a:58:49:34:4e:43:35:30:62:33:41:69:58:58:30:4b:0a","dst_port":48685,"seq_num":114466802,"src_addr":"185.199.110.133","ack_num":2025844951,"src_port":443,"frame_time":"1648197742.817612000","dst_addr":"10.1.10.1"}
tq = {"http_raw":"47:45:54:20:2f:6d:6f:6e:6f:70:6f:6c:79:6f:66:66:69:63:69:61:6c:2f:65:30:36:35:36:61:35:61:34:64:30:34:61:66:30:36:65:32:61:66:39:65:64:38:33:61:61:30:63:38:36:38:2f:72:61:77:2f:68:65:6c:6c:6f:77:6f:72:6c:64:2e:6a:73:6f:6e:20:48:54:54:50:2f:31:2e:31:0d:0a:41:75:74:68:6f:72:69:7a:61:74:69:6f:6e:3a:20:61:36:39:31:62:38:38:37:35:38:63:33:34:35:38:63:0d:0a:43:6f:6e:74:65:6e:74:2d:54:79:70:65:3a:20:61:70:70:6c:69:63:61:74:69:6f:6e:2f:6a:73:6f:6e:0d:0a:55:73:65:72:2d:41:67:65:6e:74:3a:20:44:61:6c:76:69:6b:2f:32:2e:31:2e:30:20:28:4c:69:6e:75:78:3b:20:55:3b:20:41:6e:64:72:6f:69:64:20:31:30:3b:20:4c:65:6e:6f:76:6f:20:50:32:61:34:32:20:42:75:69:6c:64:2f:51:51:33:41:2e:32:30:30:38:30:35:2e:30:30:31:29:0d:0a:48:6f:73:74:3a:20:67:69:73:74:2e:67:69:74:68:75:62:75:73:65:72:63:6f:6e:74:65:6e:74:2e:63:6f:6d:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:4b:65:65:70:2d:41:6c:69:76:65:0d:0a:41:63:63:65:70:74:2d:45:6e:63:6f:64:69:6e:67:3a:20:67:7a:69:70:0d:0a:0d:0a","dst_port":443,"seq_num":2025844604,"src_addr":"10.1.10.1","ack_num":114466802,"src_port":48685,"frame_time":"1648197742.620098000","dst_addr":"185.199.110.133"} 

bl = [ bytes.fromhex(x) for x in tp["http_raw"].split(":")]
tp["http_raw"] = bl

bl = [ bytes.fromhex(x) for x in tq["http_raw"].split(":")]
tq["http_raw"] = bl

tp["frame_time"] = int(tp["frame_time"].split(".")[0])
tq["frame_time"] = int(tq["frame_time"].split(".")[0])


write_to_pcap(tq["frame_time"],tq["http_raw"],tq["src_addr"],tq["dst_addr"],tq["src_port"],tq["dst_port"],tq["seq_num"],tq["ack_num"],True)
write_to_pcap(tp["frame_time"],tp["http_raw"],tp["src_addr"],tp["dst_addr"],tp["src_port"],tp["dst_port"],tp["seq_num"],tp["ack_num"],False)

